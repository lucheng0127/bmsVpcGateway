/*
Generated by code-generator, do not edit it
*/
// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	apisnetworkv1alpha1 "github.com/lucheng0127/bmsVpcGateway/pkg/apis/network/v1alpha1"
	versioned "github.com/lucheng0127/bmsVpcGateway/pkg/client/clientset/versioned"
	internalinterfaces "github.com/lucheng0127/bmsVpcGateway/pkg/client/informers/externalversions/internalinterfaces"
	networkv1alpha1 "github.com/lucheng0127/bmsVpcGateway/pkg/client/listers/network/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// VpcConnectionInformer provides access to a shared informer and lister for
// VpcConnections.
type VpcConnectionInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() networkv1alpha1.VpcConnectionLister
}

type vpcConnectionInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewVpcConnectionInformer constructs a new informer for VpcConnection type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewVpcConnectionInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredVpcConnectionInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredVpcConnectionInformer constructs a new informer for VpcConnection type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredVpcConnectionInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.NetworkV1alpha1().VpcConnections().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.NetworkV1alpha1().VpcConnections().Watch(context.TODO(), options)
			},
		},
		&apisnetworkv1alpha1.VpcConnection{},
		resyncPeriod,
		indexers,
	)
}

func (f *vpcConnectionInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredVpcConnectionInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *vpcConnectionInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apisnetworkv1alpha1.VpcConnection{}, f.defaultInformer)
}

func (f *vpcConnectionInformer) Lister() networkv1alpha1.VpcConnectionLister {
	return networkv1alpha1.NewVpcConnectionLister(f.Informer().GetIndexer())
}
